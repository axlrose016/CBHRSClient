{"version":3,"sources":["webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/login/login.component.html","webpack:///src/app/auth/register/register.component.ts","webpack:///src/app/auth/register/register.component.html"],"names":["routes","path","component","AuthRoutingModule","forChild","imports","exports","AuthModule","declarations","LoginComponent","fb","libraryserve","authserv","router","frmglobalserv","hide","hideRegister","matcher","MyErrorStateMatcher","signInForm","group","Username","required","Password","registerForm","userName","password","confirmPassword","validators","checkPasswords","el","document","getElementById","style","error$","err$","showLoadingProgressBar$","_password","get","value","_confirmPassword","notSame","valid","login","next","updateRecordWOToken","subscribe","response","openSnackBar","showRegisterForm","error","status","logout","signIn","register","selector","templateUrl","styleUrls","control","form","invalidCtrl","invalid","parent","dirty","invalidParent","RegisterComponent"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\n\nconst routes: Routes = [\n  {\n    path: 'login',\n    component: LoginComponent,\n  },\n  {\n    path: 'register',\n    component: RegisterComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport {  MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport { SharedMaterialModule } from 'app/shared/shared-material/shared-material.module';\nimport { AppLoaderComponent } from 'app/shared/component/app-loader/app-loader.component';\nimport { SharedComponentModule } from 'app/shared/component/shared-component.module';\n\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    MatFormFieldModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatIconModule,\n    SharedComponentModule,\n    SharedMaterialModule,\n  ],\n})\nexport class AuthModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, FormGroupDirective, NgForm, Validators } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from 'app/shared/service/auth.service';\nimport { FormGlobalDataService } from 'app/shared/service/formGlobalData.service';\nimport { LibraryService } from 'app/shared/service/library.service';\nimport { Observable, Subject } from 'rxjs';\n\n@Component({\n  selector: 'ngx-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  hide = true;\n  hideRegister = true;\n  return: string;\n  \n  matcher = new MyErrorStateMatcher();\n\n  public error$: Observable<string>;\n  public showLoadingProgressBar$: Observable<boolean>;\n  constructor(\n    private fb: FormBuilder,\n    private libraryserve: LibraryService,\n    private authserv: AuthService,\n    private router: Router,\n    private frmglobalserv : FormGlobalDataService,\n  ) { }\n\n  ngOnInit(): void {\n    const el = document.getElementById('nb-global-spinner');\n    if (el) {\n      el.style['display'] = 'none';\n    }\n\n    this.error$ = this.authserv.err$;\n    this.showLoadingProgressBar$ = this.authserv.showLoadingProgressBar$;\n  }\n\n  signInForm = this.fb.group({\n    Username: [null, Validators.required],\n    Password: [null, Validators.required]    \n  });\n\n  checkPasswords(group: FormGroup) { \n    const _password = group.get('password').value;\n    const _confirmPassword = group.get('confirmPassword').value;\n  \n    return _password === _confirmPassword ? true : { notSame: true }     \n  }\n  registerForm = this.fb.group({\n    userName: [null, Validators.required],\n    password: [null, Validators.required],\n    confirmPassword:[null, Validators.required]\n  }, {validators:this.checkPasswords});\n\n\n  signIn(){\n    if(this.signInForm.valid)\n      this.authserv.login(this.signInForm.value);\n  }\n\n  register(){\n    if(this.registerForm.valid)\n    {\n      ;\n      this.authserv.showLoadingProgressBar$.next(true);\n      this.frmglobalserv.updateRecordWOToken(this.registerForm.value,'User/PostUser').subscribe((response) =>\n      {\n        this.authserv.showLoadingProgressBar$.next(false);\n        this.authserv.err$.next(null);\n        this.frmglobalserv.openSnackBar();\n        this.showRegisterForm();\n      }, error => {\n        if(error.status == \"409\"){\n          this.authserv.showLoadingProgressBar$.next(false);\n          this.authserv.err$.next(\"User Name already exist, Please try another.\");\n        }\n        else{\n          this.authserv.showLoadingProgressBar$.next(false);\n          this.authserv.err$.next(\"Connection error, Please check your network or the server may be down.\");\n        }\n    });\n    }\n  }\n\n  showRegisterForm(){\n    this.hideRegister = this.hideRegister == false ? true : false; \n    this.authserv.err$.next(null);\n  }\n\n  signOut() { \n    this.authserv.logout();\n  }  \n}\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const invalidCtrl = !!(control && control.invalid && control.parent.dirty);\n    const invalidParent = !!(control && control.parent && control.parent.invalid && control.parent.dirty);\n    return (invalidCtrl || invalidParent);\n  }\n}\n","<nb-layout>\n    <nb-layout-column>\n        <div class=\"bg\">\n            <div class=\"header col-sm-4\">\n            </div>\n            <div id=\"a1\" class=\"col-sm-4\">\n            </div>\n            <div id=\"a2\" class=\"col-sm-4\">\n                <div class=\"title\">\n                    <b>C</b>loud-based <b> HR </b> <b>S</b>ystem \n                </div>\n                <div [hidden]=\"!hideRegister\">\n                    <form [formGroup]=\"signInForm\"  (ngSubmit)=\"signIn()\">\n                        <mat-form-field  appearance=\"outline\" class=\"mat-fullWidth\">\n                            <mat-label>User name</mat-label>\n                            <input formControlName=\"Username\" matInput type=\"text\" />\n                        </mat-form-field>\n                        <mat-form-field appearance=\"outline\" class=\"mat-fullWidth\">\n                            <mat-label>Password</mat-label>\n                            <input formControlName=\"Password\" matInput [type]=\"hide ? 'password' : 'text'\">\n                            <button type=\"button\" mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\n                            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n                            </button>\n                        </mat-form-field>\n                        <div id=\"a3\">\n                            <a href=\"\"><small class=\"mat-fullWidth\">forgot password?</small></a> \n                        </div>\n                        <button mat-raised-button color=\"primary\" id=\"a4\" class=\"mat-fullWidth\">Login</button>\n                    </form>\n                    <button mat-raised-button color=\"primary\" id=\"a4\" class=\"mat-fullWidth\" (click)=\"showRegisterForm()\">Register</button>\n                </div>\n                <div [hidden]=\"hideRegister\">\n                    <form [formGroup]=\"registerForm\" (ngSubmit)=\"register()\">\n                        <mat-form-field  appearance=\"outline\" class=\"mat-fullWidth\">\n                            <mat-label>User name</mat-label>\n                            <input formControlName=\"userName\" matInput type=\"text\" />\n                        </mat-form-field>\n                        <mat-form-field appearance=\"outline\" class=\"mat-fullWidth\">\n                            <mat-label>Password</mat-label>\n                            <input formControlName=\"password\" matInput [type]=\"hide ? 'password' : 'text'\">\n                            <mat-error *ngIf=\"registerForm.hasError('required', '_password')\">\n                                Please enter your new password\n                            </mat-error>\n                            <button type=\"button\" mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\n                            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n                            </button>\n                        </mat-form-field>\n                        <mat-form-field appearance=\"outline\" class=\"mat-fullWidth\">\n                            <mat-label>Confirm Password</mat-label>\n                            <input formControlName=\"confirmPassword\" matInput [type]=\"hide ? 'password' : 'text'\" [errorStateMatcher]=\"matcher\">\n                            <mat-error *ngIf=\"registerForm.hasError('notSame')\">\n                                Passwords do not match\n                            </mat-error>  \n                            <button type=\"button\" mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\n                            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n                            </button>\n                        </mat-form-field>\n                        <div id=\"a3\">\n                            <a id=\"a_link\" (click)=\"showRegisterForm()\"><small class=\"mat-fullWidth\">Already have an account?</small></a> \n                        </div>\n                        <button mat-raised-button color=\"primary\" id=\"a4\" class=\"mat-fullWidth\">Submit</button>\n                    </form>\n                </div>\n                <axl-app-loader *ngIf=\"showLoadingProgressBar$ | async\"></axl-app-loader>\n                <span style=\"color:red;\"><i>{{error$ | async}}</i></span>\n            </div>\n        </div>\n    </nb-layout-column>\n</nb-layout>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n    const el = document.getElementById('nb-global-spinner');\n    if (el) {\n      el.style['display'] = 'none';\n    }\n  }\n\n}\n","<p>register works!</p>\n"]}