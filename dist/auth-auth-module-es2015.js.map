{"version":3,"sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/register/register.component.ts","./src/app/auth/register/register.component.html"],"names":[],"mappings":"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","file":"auth-auth-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\n\nconst routes: Routes = [\n  {\n    path: 'login',\n    component: LoginComponent,\n  },\n  {\n    path: 'register',\n    component: RegisterComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport {  MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport { SharedMaterialModule } from 'app/shared/shared-material/shared-material.module';\nimport { AppLoaderComponent } from 'app/shared/component/app-loader/app-loader.component';\nimport { SharedComponentModule } from 'app/shared/component/shared-component.module';\n\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    MatFormFieldModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatIconModule,\n    SharedComponentModule,\n    SharedMaterialModule,\n  ],\n})\nexport class AuthModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, FormGroupDirective, NgForm, Validators } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from 'app/shared/service/auth.service';\nimport { FormGlobalDataService } from 'app/shared/service/formGlobalData.service';\nimport { LibraryService } from 'app/shared/service/library.service';\nimport { Observable, Subject } from 'rxjs';\n\n@Component({\n  selector: 'ngx-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  hide = true;\n  hideRegister = true;\n  return: string;\n  \n  matcher = new MyErrorStateMatcher();\n\n  public error$: Observable<string>;\n  public showLoadingProgressBar$: Observable<boolean>;\n  constructor(\n    private fb: FormBuilder,\n    private libraryserve: LibraryService,\n    private authserv: AuthService,\n    private router: Router,\n    private frmglobalserv : FormGlobalDataService,\n  ) { }\n\n  ngOnInit(): void {\n    const el = document.getElementById('nb-global-spinner');\n    if (el) {\n      el.style['display'] = 'none';\n    }\n\n    this.error$ = this.authserv.err$;\n    this.showLoadingProgressBar$ = this.authserv.showLoadingProgressBar$;\n  }\n\n  signInForm = this.fb.group({\n    Username: [null, Validators.required],\n    Password: [null, Validators.required]    \n  });\n\n  checkPasswords(group: FormGroup) { \n    const _password = group.get('password').value;\n    const _confirmPassword = group.get('confirmPassword').value;\n  \n    return _password === _confirmPassword ? true : { notSame: true }     \n  }\n  registerForm = this.fb.group({\n    userName: [null, Validators.required],\n    password: [null, Validators.required],\n    confirmPassword:[null, Validators.required]\n  }, {validators:this.checkPasswords});\n\n\n  signIn(){\n    if(this.signInForm.valid)\n      this.authserv.login(this.signInForm.value);\n  }\n\n  register(){\n    if(this.registerForm.valid)\n    {\n      ;\n      this.authserv.showLoadingProgressBar$.next(true);\n      this.frmglobalserv.updateRecordWOToken(this.registerForm.value,'User/PostUser').subscribe((response) =>\n      {\n        this.authserv.showLoadingProgressBar$.next(false);\n        this.authserv.err$.next(null);\n        this.frmglobalserv.openSnackBar();\n        this.showRegisterForm();\n      }, error => {\n        if(error.status == \"409\"){\n          this.authserv.showLoadingProgressBar$.next(false);\n          this.authserv.err$.next(\"User Name already exist, Please try another.\");\n        }\n        else{\n          this.authserv.showLoadingProgressBar$.next(false);\n          this.authserv.err$.next(\"Connection error, Please check your network or the server may be down.\");\n        }\n    });\n    }\n  }\n\n  showRegisterForm(){\n    this.hideRegister = this.hideRegister == false ? true : false; \n    this.authserv.err$.next(null);\n  }\n\n  signOut() { \n    this.authserv.logout();\n  }  \n}\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const invalidCtrl = !!(control && control.invalid && control.parent.dirty);\n    const invalidParent = !!(control && control.parent && control.parent.invalid && control.parent.dirty);\n    return (invalidCtrl || invalidParent);\n  }\n}\n","<nb-layout>\n    <nb-layout-column>\n        <div class=\"bg\">\n            <div class=\"header col-sm-4\">\n            </div>\n            <div id=\"a1\" class=\"col-sm-4\">\n            </div>\n            <div id=\"a2\" class=\"col-sm-4\">\n                <div class=\"title\">\n                    <b>C</b>loud-based <b> HR </b> <b>S</b>ystem \n                </div>\n                <div [hidden]=\"!hideRegister\">\n                    <form [formGroup]=\"signInForm\"  (ngSubmit)=\"signIn()\">\n                        <mat-form-field  appearance=\"outline\" class=\"mat-fullWidth\">\n                            <mat-label>User name</mat-label>\n                            <input formControlName=\"Username\" matInput type=\"text\" />\n                        </mat-form-field>\n                        <mat-form-field appearance=\"outline\" class=\"mat-fullWidth\">\n                            <mat-label>Password</mat-label>\n                            <input formControlName=\"Password\" matInput [type]=\"hide ? 'password' : 'text'\">\n                            <button type=\"button\" mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\n                            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n                            </button>\n                        </mat-form-field>\n                        <div id=\"a3\">\n                            <a href=\"\"><small class=\"mat-fullWidth\">forgot password?</small></a> \n                        </div>\n                        <button mat-raised-button color=\"primary\" id=\"a4\" class=\"mat-fullWidth\">Login</button>\n                    </form>\n                    <button mat-raised-button color=\"primary\" id=\"a4\" class=\"mat-fullWidth\" (click)=\"showRegisterForm()\">Register</button>\n                </div>\n                <div [hidden]=\"hideRegister\">\n                    <form [formGroup]=\"registerForm\" (ngSubmit)=\"register()\">\n                        <mat-form-field  appearance=\"outline\" class=\"mat-fullWidth\">\n                            <mat-label>User name</mat-label>\n                            <input formControlName=\"userName\" matInput type=\"text\" />\n                        </mat-form-field>\n                        <mat-form-field appearance=\"outline\" class=\"mat-fullWidth\">\n                            <mat-label>Password</mat-label>\n                            <input formControlName=\"password\" matInput [type]=\"hide ? 'password' : 'text'\">\n                            <mat-error *ngIf=\"registerForm.hasError('required', '_password')\">\n                                Please enter your new password\n                            </mat-error>\n                            <button type=\"button\" mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\n                            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n                            </button>\n                        </mat-form-field>\n                        <mat-form-field appearance=\"outline\" class=\"mat-fullWidth\">\n                            <mat-label>Confirm Password</mat-label>\n                            <input formControlName=\"confirmPassword\" matInput [type]=\"hide ? 'password' : 'text'\" [errorStateMatcher]=\"matcher\">\n                            <mat-error *ngIf=\"registerForm.hasError('notSame')\">\n                                Passwords do not match\n                            </mat-error>  \n                            <button type=\"button\" mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\n                            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n                            </button>\n                        </mat-form-field>\n                        <div id=\"a3\">\n                            <a id=\"a_link\" (click)=\"showRegisterForm()\"><small class=\"mat-fullWidth\">Already have an account?</small></a> \n                        </div>\n                        <button mat-raised-button color=\"primary\" id=\"a4\" class=\"mat-fullWidth\">Submit</button>\n                    </form>\n                </div>\n                <axl-app-loader *ngIf=\"showLoadingProgressBar$ | async\"></axl-app-loader>\n                <span style=\"color:red;\"><i>{{error$ | async}}</i></span>\n            </div>\n        </div>\n    </nb-layout-column>\n</nb-layout>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n    const el = document.getElementById('nb-global-spinner');\n    if (el) {\n      el.style['display'] = 'none';\n    }\n  }\n\n}\n","<p>register works!</p>\n"],"sourceRoot":"webpack:///"}