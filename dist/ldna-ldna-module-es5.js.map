{"version":3,"sources":["webpack:///src/app/pages/learning_and_development/ldna/ldna-entry/ldna-entry.component.ts","webpack:///src/app/pages/learning_and_development/ldna/ldna-entry/ldna-entry.component.html","webpack:///src/app/pages/learning_and_development/ldna/ldna-list/ldna-list.component.ts","webpack:///src/app/pages/learning_and_development/ldna/ldna-list/ldna-list.component.html","webpack:///src/app/pages/learning_and_development/ldna/ldna-routing.module.ts","webpack:///src/app/pages/learning_and_development/ldna/ldna.module.ts"],"names":["LdnaEntryComponent","dialogserve","fb","route","router","frmglobaldataserve","libraries_svc","baseUrl","apiUrl","curRecordId","ldnaDetail","ldnaResults","loadAllLibrary","lib_core_competency","lib_core_competencies_svc","lib_competency_category","lib_competency_categories_svc","showLoadingProgressBar$","getShowLoadingSpinner","setLoadingProgressBar","initData","lib_department","JSON","parse","sessionStorage","getItem","snapshot","params","getLDNA","buildLDNADetail","getRecord","subscribe","data","btnclick","LDNAForm","valid","saveRecord","updateRecord","value","response","console","log","navigateByUrl","then","x","openSnackBar","error","stringify","group","ldnaId","raw","departmentId","array","forEach","i","createLDNAResultFormGroup","openFormDialog","selectedCoreCompetency$","undefined","doCheckController$","createCoreCompetencyFormGroup","setDoCheckController","libCoreCompetency","coreCompetencyFG","coreCompetencyId","description","libCompetencyCategory","ldnaResult","competencyDesc","ldnaResultFG","ldnaResultId","coreCompetencyDesc","competencyId","permanent","contractual","ldnaResultFormArray","push","get","eventHandler","selector","templateUrl","styleUrls","providedIn","LdnaListComponent","dialog","displayedColumns","gridDataSource","ldnaList","ldnaConsoReport","refreshTheList","urlstr","loadList","res","btnevent","id","event","filterValue","target","filter","trim","toLocaleLowerCase","fileName","Date","now","dataToExport","map","CoreCompetency","coreCompetency","CompetencyCategory","competencyCategory","PMED_Permanent","pmeD_Permanent","PMED_Contractual","pmeD_Contractual","Regulation_Licensing_and_Enforcement_Division_Permanent","regulation_Licensing_and_Enforcement_Division_Permanent","Regulation_Licensing_and_Enforcement_Division_Contractual","regulation_Licensing_and_Enforcement_Division_Contractual","District_Provincial_Health_Teams_Permanent","district_Provincial_Health_Teams_Permanent","District_Provincial_Health_Teams_Contractual","district_Provincial_Health_Teams_Contractual","exportToXlsx","mp","paginator","applyFilter","exportTableList","matPaginator","routes","path","component","pathMatch","LdnaRoutingModule","forChild","imports","exports","LdnaModule","declarations"],"mappings":"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","file":"ldna-ldna-module-es5.js","sourcesContent":["import { Component, Injectable, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LDNADetails, LDNAResults } from 'app/shared/model/learningAndDevelopment.model';\nimport { lib_competency_category, lib_core_competency, lib_department } from 'app/shared/model/library.model';\nimport { DialogService } from 'app/shared/service/dialog.service';\nimport { FormGlobalDataService } from 'app/shared/service/formGlobalData.service';\nimport { LibraryService } from 'app/shared/service/library.service';\nimport { environment } from 'environments/environment';\nimport { Guid } from 'guid-typescript';\nimport { url } from 'inspector';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'ngx-ldna-entry',\n  templateUrl: './ldna-entry.component.html',\n  styleUrls: ['./ldna-entry.component.scss']\n})\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LdnaEntryComponent implements OnInit {\n  public baseUrl = environment.apiUrl+\"Library/\";\n  public curRecordId: string = null;\n  public LDNAForm: FormGroup;\n  public showLoadingProgressBar$: Observable<boolean>;\n  public lib_department: lib_department[];\n  public lib_core_competency: lib_core_competency[];\n  public lib_competency_category: lib_competency_category[];\n  public selectedCoreCompetency: number;\n  ldnaDetail: LDNADetails = {\n    ldnaResults:[],\n  };\n  constructor(\n    private dialogserve:DialogService,\n    private fb: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private frmglobaldataserve: FormGlobalDataService,\n    private libraries_svc : LibraryService\n  ) { \n    this.libraries_svc.loadAllLibrary();\n  }\n\n  ngOnInit(): void {\n    this.lib_core_competency = this.libraries_svc.lib_core_competencies_svc;\n    this.lib_competency_category = this.libraries_svc.lib_competency_categories_svc;\n    this.showLoadingProgressBar$ = this.frmglobaldataserve.getShowLoadingSpinner;\n    this.frmglobaldataserve.setLoadingProgressBar(true);\n    this.initData();\n    this.frmglobaldataserve.setLoadingProgressBar(false);\n  }\n\n  initData(){\n      this.lib_department = JSON.parse(sessionStorage.getItem('lib_department'));\n      this.curRecordId = this.route.snapshot.params['id'];\n      if(this.curRecordId != \"0\"){\n        this.getLDNA();\n      }else{\n        this.buildLDNADetail();\n      }\n      //this.getCoreCompetency();\n  }\n\n  getLDNA(){\n    this.frmglobaldataserve.getRecord(\"LDNA/GetLDNA/\"+this.curRecordId)\n      .subscribe((data: LDNADetails) => {\n        this.ldnaDetail = data;\n        this.buildLDNADetail(this.ldnaDetail);\n      })\n  }\n\n  eventHandler(btnclick:string){\n    if(btnclick == \"Save\"){\n      if(this.LDNAForm.valid)\n        this.saveRecord();\n    }else if(btnclick == \"Delete\"){\n    }\n  }\n\n  saveRecord(){\n    this.frmglobaldataserve.updateRecord(this.LDNAForm.value,\"LDNA/PostLDNA\")\n      .subscribe(\n        (response) =>{\n          console.log(\"Record Saved Successfully: \"+ response);\n          this.router.navigateByUrl(\"pages/learning-and-development/ldna/\"+response).then(x =>{\n            this.initData(),\n            this.frmglobaldataserve.openSnackBar();\n          },(error) =>{\n            console.log(\"Error Saving the Record: \"+ JSON.stringify(this.LDNAForm.value));\n          });\n        }\n      )\n  }\n\n  buildLDNADetail(ldnaDetail?:LDNADetails){\n    this.LDNAForm = this.fb.group({\n      ldnaId:[ldnaDetail?ldnaDetail.ldnaId: Guid.raw],\n      departmentId:[ldnaDetail?ldnaDetail.departmentId:0],\n      ldnaResults:this.fb.array([]),\n    });\n\n    this.ldnaDetail.ldnaResults.forEach(i => {\n      this.createLDNAResultFormGroup(i);\n    });\n  }\n\n  openCoreCompetencyDialog(){\n    this.dialogserve.openFormDialog('CoreCompetency');\n  }\n\n  ngDoCheck(){\n    if(this.dialogserve.selectedCoreCompetency$ != undefined && this.dialogserve.doCheckController$.value == true){\n          this.createCoreCompetencyFormGroup(<lib_core_competency>this.dialogserve.selectedCoreCompetency$);\n          this.dialogserve.setDoCheckController(false);\n        };\n  }\n\n  createCoreCompetencyFormGroup(libCoreCompetency:lib_core_competency){\n    let coreCompetencyFG = this.fb.group({\n      coreCompetencyId:[libCoreCompetency?libCoreCompetency.coreCompetencyId: 0],\n      description:[libCoreCompetency?libCoreCompetency.description:''],\n      libCompetencyCategory: this.fb.array([]),\n    });\n\n    libCoreCompetency.libCompetencyCategory.forEach(i => {\n      this.createLDNAResultFormGroup(i, libCoreCompetency, i.description);\n    });\n  }\n\n  createLDNAResultFormGroup(ldnaResult?:LDNAResults, libCoreCompetency?: lib_core_competency, competencyDesc?: string){\n    let ldnaResultFG:FormGroup = this.fb.group({\n      ldnaResultId:[ldnaResult.ldnaResultId? ldnaResult.ldnaResultId: Guid.raw],\n      coreCompetencyId:[ldnaResult.coreCompetencyId? ldnaResult.coreCompetencyId : libCoreCompetency.coreCompetencyId? libCoreCompetency.coreCompetencyId : null],\n      coreCompetencyDesc:[libCoreCompetency? libCoreCompetency.description: null],\n      competencyId:[ldnaResult.competencyId? ldnaResult.competencyId: null],\n      competencyDesc:[competencyDesc? competencyDesc : null],\n      permanent:[ldnaResult.permanent? ldnaResult.permanent:0],\n      contractual:[ldnaResult.contractual? ldnaResult.contractual:0]\n    });\n    this.ldnaResultFormArray.push(ldnaResultFG);\n  }\n\n  get ldnaResultFormArray(): FormArray{\n    return this.LDNAForm.get(\"ldnaResults\") as FormArray;\n  }  \n}\n","<axl-app-crud (appcrudbtnclick)=\"eventHandler($event)\"></axl-app-crud>\n<div class=\"container\">\n    <form [formGroup]=\"LDNAForm\" *ngIf=\"this.LDNAForm\">\n        <nb-card>\n            <axl-app-loader *ngIf=\"showLoadingProgressBar$ | async\"></axl-app-loader>\n            <nb-card-header>\n              LDNA Form\n            </nb-card-header>\n        </nb-card>\n        <nb-card>\n            <nb-card-body>\n                <nb-select formControlName=\"departmentId\" fullWidth placeholder=\"Department\"  [(selected)]=\"selectedDepartment\">\n                    <nb-option *ngFor=\"let department of lib_department; let i = index\" [value]=\"department.departmentId\">\n                        {{department.description}}\n                    </nb-option>\n                </nb-select>\n            </nb-card-body>\n        </nb-card>\n        <nb-card>\n            <nb-card-body>\n              <div style=\"padding-bottom: 5px;\">\n                <button (click)=\"openCoreCompetencyDialog();\" nbButton status=\"success\"><nb-icon icon=\"search-outline\"></nb-icon>Search Core Competency</button>\n              </div>\n              <table>\n                  <tr>\n                    <th style=\"padding-right: 50px;\">Parent Competency</th>\n                    <th style=\"padding-right: 135px;\">Competency Category</th>\n                    <th style=\"padding-right: 20px;\">Permanent</th>\n                    <th style=\"padding-right: 20px;\">Contractual</th>\n                  </tr>\n                  <tr *ngFor=\"let category of ldnaResultFormArray.controls;let i = index; let last = last;\"[formGroup]=\"category\">\n                      <td>\n                        <nb-select formControlName=\"coreCompetencyId\" fullWidth placeholder=\"Core Competency\"  [(selected)]=\"selectedCoreCompetency\">\n                          <nb-option *ngFor=\"let coreCompetency of lib_core_competency; let i = index\" [value]=\"coreCompetency.coreCompetencyId\">\n                              {{coreCompetency.description}}\n                          </nb-option>\n                        </nb-select>\n                      </td>\n                      <td>\n                        <nb-select formControlName=\"competencyId\" fullWidth placeholder=\"Competency Category\"  [(selected)]=\"selectedCompetencyCategory\">\n                          <nb-option *ngFor=\"let competencyCategory of lib_competency_category; let i = index\" [value]=\"competencyCategory.competencyId\">\n                              {{competencyCategory.description}}\n                          </nb-option>\n                        </nb-select>\n                      </td>\n                      <td>\n                        <mat-form-field style=\"width: 100px;\">\n                            <input type=\"number\" formControlName=\"permanent\" style=\"text-align: right;\" matInput/>\n                        </mat-form-field>\n                      </td>\n                      <td>\n                        <mat-form-field style=\"width: 100px;\">\n                            <input type=\"number\" formControlName=\"contractual\" style=\"text-align: right;\" matInput/>\n                        </mat-form-field>\n                      </td>\n                  </tr>\n              </table>\n            </nb-card-body>\n        </nb-card>\n    </form>\n</div>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Router } from '@angular/router';\nimport { LDNAConsolidatedReport, LDNADetails } from 'app/shared/model/learningAndDevelopment.model';\nimport { FormGlobalDataService } from 'app/shared/service/formGlobalData.service';\nimport { environment } from 'environments/environment';\nimport { Guid } from 'guid-typescript';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'ngx-ldna-list',\n  templateUrl: './ldna-list.component.html',\n  styleUrls: ['./ldna-list.component.scss']\n})\nexport class LdnaListComponent implements OnInit {\n  public baseUrl = environment.apiUrl+\"LDNA/\";\n  public showLoadingProgressBar$: Observable<boolean>;\n  private paginator: MatPaginator;\n  displayedColumns:string[] = ['ldnaId','departmentDesc']\n  gridDataSource = new MatTableDataSource();\n  @ViewChild(MatPaginator, {static:true}) set matPaginator(mp: MatPaginator)\n  {\n    this.paginator = mp;\n    this.gridDataSource.paginator = this.paginator;\n  }\n  ldnaList: LDNADetails[] = [];\n  ldnaConsoReport: LDNAConsolidatedReport[] = [];\n  constructor(\n    private router: Router,\n    private frmglobaldataserve: FormGlobalDataService,\n    private dialog: MatDialog,\n  ) { \n  }\n\n  ngOnInit(): void {\n    this.showLoadingProgressBar$ = this.frmglobaldataserve.getShowLoadingSpinner;\n    this.refreshTheList();\n  }\n  \n  refreshTheList(){\n    var urlstr = this.baseUrl+'GetLDNAList/';\n    this.frmglobaldataserve.setLoadingProgressBar(true);\n    this.frmglobaldataserve.loadList(urlstr)\n      .subscribe((res: LDNADetails[]) => {\n        this.ldnaList = res;\n        this.gridDataSource.data = res;\n        this.frmglobaldataserve.setLoadingProgressBar(false);\n      },\n      () => {})\n  }\n\n  eventHandler(btnevent: string){\n    if(btnevent == \"Refresh\"){\n      this.refreshTheList();\n    }\n    else if(btnevent == \"Add\"){\n      this.router.navigateByUrl(\"pages/learning-and-development/ldna/\"+0);\n    }\n  }\n\n  onUserRowSelect(id:Guid):void{\n    this.router.navigateByUrl(\"pages/learning-and-development/ldna/\"+id);\n  }\n\n  applyFilter(event:Event){\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.gridDataSource.filter = filterValue.trim().toLocaleLowerCase();\n  }\n\n  exportTableList(){\n    this.frmglobaldataserve.setLoadingProgressBar(true);\n    this.frmglobaldataserve.loadList(this.baseUrl+'ExportLDNAConsolidated/')\n    .subscribe((res: LDNAConsolidatedReport[]) => {\n      this.ldnaConsoReport = res;\n      this.frmglobaldataserve.setLoadingProgressBar(false);\n      var fileName = \"LDNAMasterList_\"+Date.now+'.xlsx';\n      let dataToExport = this.ldnaConsoReport\n        .map(x => ({\n          CoreCompetency: x.coreCompetency,\n          CompetencyCategory: x.competencyCategory,\n          PMED_Permanent: x.pmeD_Permanent,\n          PMED_Contractual: x.pmeD_Contractual,\n          Regulation_Licensing_and_Enforcement_Division_Permanent: x.regulation_Licensing_and_Enforcement_Division_Permanent, \n          Regulation_Licensing_and_Enforcement_Division_Contractual: x.regulation_Licensing_and_Enforcement_Division_Contractual,\n          District_Provincial_Health_Teams_Permanent: x.district_Provincial_Health_Teams_Permanent,\n          District_Provincial_Health_Teams_Contractual: x.district_Provincial_Health_Teams_Contractual\n        }));\n      this.frmglobaldataserve.exportToXlsx(dataToExport,'LDNAMasterList',fileName);\n    },\n    () => {})\n  }\n}\n","<axl-app-list  (applistbtnclick)='eventHandler($event)'></axl-app-list>\n<div class=\"container\">\n    <nb-card>\n        <nb-card-header>\n            LDNA\n        </nb-card-header>\n        <mat-tab-group>\n            <mat-tab label=\"List\">\n                <axl-app-loader *ngIf=\"showLoadingProgressBar$ | async\"></axl-app-loader>\n                    <nb-card>\n                        <nb-card-body>\n                            <mat-form-field appearance=\"standard\" style=\"float:right; width: 100%;\">\n                                <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"Search..\" #input>\n                                <mat-icon matSuffix>search</mat-icon>\n                              </mat-form-field>\n\n                            <table mat-table #table class=\"mat-elevation-z8\" [dataSource]=\"gridDataSource\" matSort>\n                                <ng-container matColumnDef=\"ldnaId\">\n                                    <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"width: 230px;\"> LDNA ID </th>\n                                    <td mat-cell *matCellDef=\"let erow\" > {{erow.ldnaId}} </td>\n                                </ng-container>  \n\n                                <ng-container matColumnDef=\"departmentDesc\">\n                                    <th mat-header-cell *matHeaderCellDef mat-sort-header style=\"width: 230px;\"> Department</th>\n                                    <td mat-cell *matCellDef=\"let erow\" > {{erow.departmentDesc}} </td>\n                                </ng-container> \n                                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n                                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" (click)=\"onUserRowSelect(row.ldnaId)\"></tr>\n                            </table>\n                            <mat-paginator [pageSizeOptions]=\"[5, 10, 15]\" showFirstLastButtons></mat-paginator>\n                        </nb-card-body>\n                    </nb-card>\n            </mat-tab>\n            <mat-tab label=\"Reports\">\n                <nb-card>\n                  <nb-card-header>Master List</nb-card-header>\n                  <nb-card-body>\n                      <div class=\"row\">\n                          <div class=\"col-sx\">\n                              <a class=\"button button1\" (click)=\"exportTableList()\">Export   <i class=\"far fa-file-excel\"></i></a>\n                          </div>\n                          <div class=\"col-lg\">\n                              <span><p>Report Details: Lorem Ipsum is simply dummy text of the printing and typesetting industry. \n                              Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\n                              </p></span> \n                          </div>\n                      </div>\n                  </nb-card-body>\n                </nb-card>\n              </mat-tab>\n        </mat-tab-group>\n    </nb-card>\n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LdnaEntryComponent } from './ldna-entry/ldna-entry.component';\nimport { LdnaListComponent } from './ldna-list/ldna-list.component';\n\nconst routes: Routes = [\n  {\n    path:'list',\n    component:LdnaListComponent,\n  },\n  {\n    path:':id',\n    component:LdnaEntryComponent,\n    pathMatch:'full'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LdnaRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LdnaRoutingModule } from './ldna-routing.module';\nimport { LdnaListComponent } from './ldna-list/ldna-list.component';\nimport { LdnaEntryComponent } from './ldna-entry/ldna-entry.component';\nimport { SharedComponentModule } from 'app/shared/component/shared-component.module';\nimport { SharedMaterialModule } from 'app/shared/shared-material/shared-material.module';\n\n\n@NgModule({\n  declarations: [LdnaListComponent, LdnaEntryComponent],\n  imports: [\n    CommonModule,\n    LdnaRoutingModule,\n    SharedComponentModule,\n    SharedMaterialModule\n  ]\n})\nexport class LdnaModule { }\n"]}